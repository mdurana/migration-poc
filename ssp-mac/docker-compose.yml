services:
  orchestrator:
    build:
      context: ../
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      # Mount the config file
      - ../config/application-poc.yaml:/app/config/application.yaml
      # Mount a volume for the SQLite metadata DB
      - orchestrator-data:/app/db
      # Mount the externalized schema output directory
      - ./generated-schema:/app/generated-schema
    # ===================================================================
    # Wait for all dependencies to be healthy
    # ===================================================================
    depends_on:
      source-db:
        condition: service_healthy
      target-db:
        condition: service_healthy
      target-db-pg:
        condition: service_healthy
      shardingsphere-proxy:
        condition: service_healthy
    environment:
      # Tell Spring Boot where to find the external config
      - SPRING_CONFIG_LOCATION=file:/app/config/application.yaml
      # Set the working dir for SQLite
      - SQLITE_DB_PATH=/app/db/orchestrator.db
      # ===================================================================
      # Startup retry configuration
      # ===================================================================
      - SHARDINGSPHERE_ADMIN_STARTUP_RETRY_MAX=20
      - SHARDINGSPHERE_ADMIN_STARTUP_RETRY_DELAY=5000
    # ===================================================================
    # Health check for orchestrator
    # ===================================================================
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped

  # ===================================================================
  # Health check
  # ===================================================================
  source-db:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=source_password
      - MYSQL_DATABASE=sourcedb
    volumes:
      - ../scripts/init-source.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password --binlog-row-image=FULL --gtid-mode=ON --enforce-gtid-consistency=ON --log-slave-updates=ON --server-id=1
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-psource_password"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  # ===================================================================
  # Health check
  # ===================================================================
  target-db:
    image: mysql:8.0
    ports:
      - "3307:3306" # Map to a different host port
    environment:
      - MYSQL_ROOT_PASSWORD=target_password
      - MYSQL_DATABASE=targetdb
    volumes:
      - ../scripts/init-disable-fk.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password --server-id=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ptarget_password"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  # ===================================================================
  # Health check
  # ===================================================================
  target-db-pg:
    image: postgres:17
    ports:
      - "15432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=target_password_pg
      - POSTGRES_DB=targetdb_pg
    command: postgres -c 'wal_level=logical' # Required for CDC
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  zookeeper:
    image: zookeeper:3.9
    ports:
      - "2181:2181"
    #healthcheck:
    #  test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
    #  interval: 10s
    #  timeout: 5s
    #  retries: 10
    #  start_period: 30s

  # ===================================================================
  # Health check and proper dependencies
  # ===================================================================
  shardingsphere-proxy:
    build:
      context: .
      dockerfile: Dockerfile-ssp
    ports:
      - "13307:3307" # Main proxy port (if we were proxying)
    volumes:
      - ../ext-lib:/opt/shardingsphere-proxy/ext-lib
      - ../config/shardingsphere-server-template.yaml:/opt/shardingsphere-proxy/conf/global.yaml
    depends_on:
      #zookeeper:
      #  condition: service_healthy
      source-db:
        condition: service_healthy
      target-db:
        condition: service_healthy
      target-db-pg:
        condition: service_healthy
    environment:
      # Java options for ShardingSphere Proxy
      JAVA_OPTS: "-Xms512m -Xmx1g -Djava.awt.headless=true"
    healthcheck:
      test: ["CMD-SHELL", 'ps aux | grep 3307 | grep "shardingsphere-proxy" | grep -v "grep" || exit 1']
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 60s
    restart: unless-stopped

volumes:
  orchestrator-data:

###############################################################################
# STARTUP SEQUENCE WITH HEALTH CHECKS
###############################################################################
#
# 1. All databases start simultaneously (source-db, target-db, target-db-pg)
#    └─> Wait for all to be healthy (~40 seconds)
#
# 2. Zookeeper starts
#    └─> Wait for healthy (~30 seconds)
#
# 3. ShardingSphere Proxy starts (after all DBs + Zookeeper are healthy)
#    └─> Wait for healthy (~60 seconds)
#
# 4. Orchestrator starts (after all dependencies are healthy)
#    └─> Background initialization with retries
#    └─> Ready in ~120 seconds
#
# Total expected startup time: ~2-3 minutes (vs instant crashes before)
#
###############################################################################

###############################################################################
# HEALTH CHECK DETAILS
###############################################################################
#
# source-db & target-db (MySQL):
#   - Test: mysqladmin ping
#   - Ready when: MySQL accepts connections
#   - Max time: 100 seconds (10s × 10 retries)
#
# target-db-pg (PostgreSQL):
#   - Test: pg_isready
#   - Ready when: PostgreSQL accepts connections
#   - Max time: 100 seconds
#
# shardingsphere-proxy:
#   - Test: netcat port check (nc -z localhost 3307)
#   - Ready when: Port 3307 is open and accepting connections
#   - Max time: 200 seconds (10s × 20 retries)
#
# orchestrator:
#   - Test: curl actuator/health endpoint
#   - Ready when: Spring Boot reports healthy
#   - Max time: 150 seconds (30s × 5 retries)
#
###############################################################################

###############################################################################
# TESTING THE SETUP
###############################################################################
#
# 1. Start all services:
#    docker-compose up
#
# 2. Watch the health status:
#    watch -n 2 'docker-compose ps'
#
# 3. Monitor orchestrator startup:
#    docker-compose logs -f orchestrator | grep -i "migration database\|initialization"
#
# 4. Verify all healthy:
#    docker-compose ps
#    # All should show "Up (healthy)" or "Up X seconds (healthy)"
#
# 5. Test the application:
#    curl http://localhost:8080/actuator/health
#
###############################################################################
